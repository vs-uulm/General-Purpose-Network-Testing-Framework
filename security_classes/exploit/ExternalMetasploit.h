//
// Created by philipp on 17.04.19.
//

#ifndef GPNTF_EXTERNALMETASPLOIT_H
#define GPNTF_EXTERNALMETASPLOIT_H

#include <string>
#include <vector>
#include <utils.hpp>
#include <unistd.h>
#include <cstring>
#include <useful_functions.hpp>
#include <thread>
#include <fcntl.h>
#include <sys/wait.h>

class External_Metasploit {
public:
    External_Metasploit(unsigned int id, const std::string &pyMetasploitPath, unsigned int startDelaySec,
                        const std::string &logPath, unsigned int attempts, const std::string &msfConnectionConfPath,
                        const std::string &msfModuleConfPath) : id(id), pyMetasploitPath(pyMetasploitPath),
                                                                startDelaySec(startDelaySec), logPath(logPath),
                                                                attempts(attempts),
                                                                msfConnectionConfPath(msfConnectionConfPath),
                                                                msfModuleConfPath(msfModuleConfPath) {}

    int start_session() {
        {
            std::vector<std::string> inputArguments{"python", pyMetasploitPath, std::to_string(id), std::to_string(attempts), msfConnectionConfPath,
                                                    msfModuleConfPath, logPath};
            std::vector<char *> argVector = GPNTFUtil::toExecArgumentList(inputArguments);
            GPNTFUtil::printVector(inputArguments);
            char **pysploitArgs = argVector.data();

            int wstatus;
            pid_t child = fork();

            if (child == -1) {
                print_status(id, "ERROR", "Forking failed: ", strerror(errno));
                return -1;
            }
            if (!child) {
                if (startDelaySec > 0) {
                    std::this_thread::sleep_for(std::chrono::seconds(startDelaySec));
                }
                int dev_null = open("/dev/null", O_WRONLY);
//                dup2(dev_null, 1);
//                dup2(dev_null, 2);
                execv(pythonPath.c_str(), pysploitArgs); // todo, fix python location stuff
                print_status(id, "ERROR", "Could not set up process image: ", strerror(errno));
                return -1;
            } else {
                waitpid(child, &wstatus, 0);
                return 0;
            }
        }
    }
private:
    unsigned int id;
    std::string pyMetasploitPath;
    unsigned int startDelaySec = 0;
    std::string logPath;
    unsigned int attempts;
    std::string msfConnectionConfPath;
    std::string msfModuleConfPath;
    std::string pythonPath="/usr/bin/python3";
};

#endif //GPNTF_EXTERNALMETASPLOIT_H
