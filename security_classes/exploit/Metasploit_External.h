//
// Created by philipp on 18.02.19.
//

#ifndef GPNTF_METASPLOIT_EXTERNAL_H
#define GPNTF_METASPLOIT_EXTERNAL_H


#include <string>
#include <vector>
#include <utils.hpp>
#include <unistd.h>
#include <cstring>
#include <useful_functions.hpp>
#include <thread>
#include <fcntl.h>
#include <sys/wait.h>
#include <sstream>

#define METASPLOIT_PATH "/usr/bin/msfconsole";
#define METASPLOIT_FILE "msfconsole";
#define METASPLOIT_RESOURCE_FLAG "-r";
#define METASPLOIT_QUIET_FLAG "-q";
#define METASPLOIT_EXPLOIT_COMMAND "exploit";
#define METASPLOIT_COMMAND_FLAG "-x";
#define METASPLOIT_COMMAND_DELIM ";";
#define READ_STDIN_FROM_PIPE_FLAG "-";

class Metasploit_External {
protected:
    std::string MSF_PATH = METASPLOIT_PATH;
    std::string MSF_FILE = METASPLOIT_FILE;
    std::string MSF_RESOURCE_FLAG = METASPLOIT_RESOURCE_FLAG;
    std::string MSF_COMMAND_FLAG = METASPLOIT_COMMAND_FLAG;
    std::string MSF_QUIET_FLAG = METASPLOIT_QUIET_FLAG;
    std::string MSF_MULTIPLE_CMDS_DELIM = METASPLOIT_COMMAND_DELIM;
    std::string MSF_EXPLOIT_COMMAND = METASPLOIT_EXPLOIT_COMMAND;
    std::string STDIN_PIPE_SYMBOL = READ_STDIN_FROM_PIPE_FLAG;
    std::vector<std::string> inputArguments;

    unsigned int id;
    unsigned int startDelaySec;
    unsigned int durationSec;
    std::string targetHost;
    unsigned int targetPort;
    std::string exploitName;

    std::string getUseCommand(std::string &moduleName) {
        std::stringstream moduleCommandStrStream{};
        moduleCommandStrStream << "use " << moduleName << MSF_MULTIPLE_CMDS_DELIM;;
        return moduleCommandStrStream.str();
    }

    std::string getRhostsCommand(std::string &host) {
        std::stringstream hostsCommandStrStream{};
        hostsCommandStrStream << "set RHOSTS " << host << MSF_MULTIPLE_CMDS_DELIM;;
        return hostsCommandStrStream.str();
    }

    std::string getRPortCommand(unsigned int &port) {
        std::stringstream portCommandStrStream{};
        portCommandStrStream << "set RPORT " << std::to_string(port) << MSF_MULTIPLE_CMDS_DELIM;
        return portCommandStrStream.str();
    }

public:
    Metasploit_External(unsigned int id,
                        unsigned int startDelaySec,
                        unsigned int durationSec,
                        const std::string &targetHost,
                        unsigned int targetPort,
                        const std::string &exploitName) : id(id),
                                                          startDelaySec(startDelaySec),
                                                          durationSec(durationSec),
                                                          targetHost(targetHost),
                                                          targetPort(targetPort),
                                                          exploitName(exploitName) {}

    virtual void get_msf_arguments() {}

    int start_session() {
        {
            get_msf_arguments();
            GPNTFUtil::printVector(inputArguments);
            std::vector<char *> argVector = GPNTFUtil::toExecArgumentList(inputArguments);
            char **msfArgs = argVector.data();

            int wstatus;
            pid_t child = fork();

            if (child == -1) {
                print_status(id, "ERROR", "Forking failed: ", strerror(errno));
                return -1;
            }
            if (!child) {
                if (startDelaySec > 0) {
                    std::cout << "waiting for " << std::to_string(startDelaySec) << "sec" << std::endl;
                    std::this_thread::sleep_for(std::chrono::seconds(startDelaySec));
                }
                std::cout << "executing...";
                int dev_null = open("/dev/null", O_WRONLY);
//                dup2(dev_null, 1);
//                dup2(dev_null, 2);
                execv(MSF_PATH.c_str(), msfArgs);
                print_status(id, "ERROR", "Could not set up process image: ", strerror(errno));
                return -1;
            } else {
                if (durationSec > 0) {
                    std::cout << "waiting for " << std::to_string(startDelaySec + durationSec) << "sec" << std::endl;
                    std::this_thread::sleep_for(std::chrono::seconds(startDelaySec + durationSec));

                    int childStatus;
                    if (waitpid(child, &childStatus, WNOHANG) == 0) {
                        kill(child, SIGTERM);
                    }
                }
                waitpid(child, &wstatus, 0);
                return 0;
            }
        }
    }
};


#endif //GPNTF_METASPLOIT_EXTERNAL_H
