//
// Created by philipp on 17.04.19.
//

#ifndef GPNTF_PORTSCAN_H
#define GPNTF_PORTSCAN_H


#include <string>

class Portscan_External {
public:
    Portscan_External(unsigned int id, const std::string &ip_dst, const std::string &scanType,
                      const std::string &logpath, const std::string &ports, unsigned int startDelaySec) : id(id),
                                                                                                          ip_dst(ip_dst),
                                                                                                          scanType(
                                                                                                                  scanType),
                                                                                                          logpath(logpath),
                                                                                                          ports(ports),
                                                                                                          startDelaySec(
                                                                                                                  startDelaySec) {}

    std::vector<std::string> get_nmap_arguments() {
        std::stringstream scanTypeStrStr{};
        scanTypeStrStr << NMAP_SCAN_TYPE_PREFIX << scanType;

        std::stringstream logFileName{};
        logFileName << id << "_portscan.xml";
        boost::filesystem::path logFilePath{logpath} ;
        boost::filesystem::path finalLogPath = logFilePath / logFileName.str();
        std::vector<std::string> args{NMAP_NAME,
                                      scanTypeStrStr.str(),
                                      NMAP_PORT_FLAG, ports,
                                      NMAP_LOGGING_FLAG, finalLogPath.string(),
                                      ip_dst};
        return args;
    };

    int start_session() {
        {
            std::vector<std::string> inputArguments = get_nmap_arguments();
            std::vector<char *> argVector = GPNTFUtil::toExecArgumentList(inputArguments);
            GPNTFUtil::printVector(inputArguments);
            char **nmapArgs = argVector.data();

            int wstatus;
            pid_t child = fork();

            if (child == -1) {
                print_status(id, "ERROR", "Forking failed: ", strerror(errno));
                return -1;
            }
            if (!child) {
                if (startDelaySec > 0) {
                    std::this_thread::sleep_for(std::chrono::seconds(startDelaySec));
                }
                int dev_null = open("/dev/null", O_WRONLY);
                dup2(dev_null, 1);
                dup2(dev_null, 2);
                execv(NMAP_PATH.c_str(), nmapArgs);
                print_status(id, "ERROR", "Could not set up process image: ", strerror(errno));
                return -1;
            } else {
                waitpid(child, &wstatus, 0);
                return 0;
            }
        }
    }

private:
    unsigned int id;
    const std::string &ip_dst;
    std::string scanType;
    std::string logpath;
    std::string ports;
    unsigned int startDelaySec;
    const std::string NMAP_NAME = "nmap";
    const std::string NMAP_PATH = "/usr/bin/nmap";
    const std::string NMAP_SCAN_TYPE_PREFIX = "-s";
    const std::string NMAP_PORT_FLAG = "-p";
    const std::string NMAP_LOGGING_FLAG = "-oX";
};

#endif //GPNTF_PORTSCAN_H
